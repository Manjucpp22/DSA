10. Develop a menu driven Program in C for the following operations on Binary 
Search Tree (BST) of Integers . a. Create a BST of N Integers: 6, 9, 5, 2, 8, 15, 24, 
14, 7, 8, 5, 2 b. Traverse the BST in Inorder, Preorder and Post Order c. Search the 
BST for a given element (KEY) and report the appropriate message d. Exit 
 
#include<stdio.h> 
#include<stdlib.h> 
 
struct node 
{ 
 int info; 
 struct node *lbranch; 
 struct node *rbranch; 
}; 
typedef struct node* NODEPTR; 
 
NODEPTR fnGetNode(void); 
void fnFreeNode(NODEPTR x); 
NODEPTR fnInsertNode(int, NODEPTR); 
void fnInOrder(NODEPTR); 
void fnPreOrder(NODEPTR); 
void fnPostOrder(NODEPTR); 
void fnSearchBST(NODEPTR, int); 
 
int main() 
{ 
 NODEPTR root = NULL; 
 int iChoice, iItem, i, iNum; 
 
    printf("Create a BST of N Integers \n"); 
    printf("\nEnter the number N : "); 
    scanf("%d", &iNum); 
    printf("\nEnter %d numbers\n", iNum); 
    for(i=0;i<iNum;i++) 
    { 
        scanf("%d", &iItem); 
        root = fnInsertNode(iItem,root); 
    } 
 for(;;) 
 { 
  printf("\n1.Inorder traversal\n2.Preorder traversal"); 
  printf("\n3.Postorder traversal\n4.Search\n5.Exit\n"); 
  printf("\nEnter your choice : "); 
  scanf("%d",&iChoice); 
 
  switch(iChoice) 
  { 
   case 1: if(root ==NULL) 
     { 
      printf("\nTree is Empty\n"); 
     } 
     else 
     { 
      printf("\nInorder Traversal is :\n"); 
      fnInOrder(root); 
      printf("\n"); 
     } 
     break; 
 
   case 2: if(root ==NULL) 
     { 
      printf("\nTree is Empty\n"); 
     } 
     else 
     { 
      printf("\nPreorder Traversal is :\n"); 
      fnPreOrder(root); 
      printf("\n"); 
     } 
     break; 
 
   case 3: if(root ==NULL) 
     { 
      printf("\nTree is Empty\n"); 
     } 
     else 
     { 
      printf("\nPostorder Traversal is :\n"); 
      fnPostOrder(root); 
      printf("\n"); 
     } 
     break; 
   case 4: printf("\nEnter the element to be searched : "); 
     scanf("%d", &iItem); 
Data structures and applications (BCSL305) 
 
Prof Megha S Kulkarni Page 3 
 
     fnSearchBST(root, iItem); 
     break; 
      
   case 5: exit(0); 
 
   default: printf("Wrong choice\n"); 
      break; 
 
  } 
 
 } 
 return 0; 
} 
 
NODEPTR fnGetNode(void) 
{ 
 NODEPTR x; 
 x = ( NODEPTR ) malloc (sizeof(struct node)); 
 if(x == NULL) 
 { 
  printf("\nOut of Memory"); 
  exit(0); 
 } 
 return x; 
} 
 
void fnFreeNode(NODEPTR x) 
{ 
 free(x); 
} 
 
NODEPTR fnInsertNode(int iItem,NODEPTR root) 
{ 
 NODEPTR temp,prev,cur; 
 
 temp = fnGetNode(); 
 temp->info = iItem; 
 temp->lbranch = NULL; 
 temp->rbranch = NULL; 
 
 if(root == NULL) 
 return temp; 
 prev = NULL; 
 cur = root; 
 
 while(cur != NULL) 
 { 
  prev = cur; 
 
  if(iItem == cur->info) 
  { 
   printf("\nDuplicate items not allowed\n"); 
   fnFreeNode(temp); 
   return root; 
  } 
 
  cur = (iItem < cur->info)? cur->lbranch: cur->rbranch; 
 } 
 
 if(iItem < prev->info) 
  prev->lbranch = temp; 
 else 
  prev->rbranch = temp; 
 
 return root; 
 
} 
 
void fnPreOrder(NODEPTR root) 
{ 
 if(root != NULL) 
 { 
  printf("%d\t",root->info); 
  fnPreOrder(root->lbranch); 
  fnPreOrder(root->rbranch); 
 } 
} 
 
void fnInOrder(NODEPTR root) 
{ 
 if(root != NULL) 
 { 
  fnInOrder(root->lbranch); 
  printf("%d\t",root->info); 
  fnInOrder(root->rbranch); 
 } 
} 
 
void fnPostOrder(NODEPTR root) 
{ 
 if(root != NULL) 
 { 
  fnPostOrder(root->lbranch); 
  fnPostOrder(root->rbranch); 
  printf("%d\t",root->info); 
 } 
} 
 
void fnSearchBST(NODEPTR root, int iElem) 
{ 
 if(root != NULL) 
 { 
  if(iElem < root->info) 
   fnSearchBST(root->lbranch, iElem); 
  else if(iElem > root->info) 
   fnSearchBST(root->rbranch, iElem); 
  else 
   printf("\n%d is found in the BST\n",iElem); 
 } 
 else 
 { 
  printf("\n%d is not found in the BST\n",iElem); 
 } 
} 

OUTPUT: 
reate a BST of N Integers 
 
Enter the number N : 3 
 
Enter 3 numbers 
2 
1 
3 
 
1.Inorder traversal 
2.Preorder traversal 
3.Postorder traversal 
4.Search 
5.Exit 
 
Enter your choice : 1 
 
Inorder Traversal is : 
DATA STRUCTURES LAB                                                                                                       BCSL305 
 
VTU, Belagavi  39 
 
1       2       3 
 
1.Inorder traversal 
2.Preorder traversal 
3.Postorder traversal 
4.Search 
5.Exit 
 
Enter your choice : 2 
 
Preorder Traversal is : 
2       1       3 
 
1.Inorder traversal 
2.Preorder traversal 
3.Postorder traversal 
4.Search 
5.Exit 
 
Enter your choice : 3 
 
Postorder Traversal is : 
1       3       2 
 
1.Inorder traversal 
2.Preorder traversal 
3.Postorder traversal 
4.Search 
5.Exit 
 
Enter your choice : 4 
 
Enter the element to be searched : 3 
 
3 is found in the BST 
 
1.Inorder traversal 
2.Preorder traversal 
3.Postorder traversal 
4.Search 
5.Exit 
 
Enter your choice : 4 
 
Enter the element to be searched : 9 
 
9 is not found in the BST 
 
1.Inorder traversal 
DATA STRUCTURES LAB                                                                                                       
 
VTU, Belagavi  40 
 
2.Preorder traversal 
3.Postorder traversal 
4.Search 
5.Exit 
 
Enter your choice : 4 
 
Enter the element to be searched : 8 
 
8 is not found in the BST 
 
1.Inorder traversal 
2.Preorder traversal 
3.Postorder traversal 
4.Search 
5.Exit 
 
Enter your choice : 5 
 
Process returned 0 (0x0)   execution time : 50.895 s 
Press any key to continue.
